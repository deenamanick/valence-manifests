apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics-resizer
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - extensions
  resourceNames:
  - kube-state-metrics
  resources:
  - deployments
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  - secrets
  - configmaps
  verbs:
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - nodes/stats
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kube-state-metrics-resizer
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: metrics-server-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: metrics-server:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
  namespace: kube-system
spec:
  ports:
  - name: metrics
    port: 8080
    protocol: TCP
    targetPort: metrics
  - name: telemetry
    port: 8081
    protocol: TCP
    targetPort: telemetry
  selector:
    app: kube-state-metrics
---
apiVersion: v1
kind: Service
metadata:
  labels:
    kubernetes.io/name: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 443
  selector:
    k8s-app: metrics-server
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: todo-backend-django-valence
    valence.net/prometheus: "true"
  name: todo-backend-django-valence
spec:
  ports:
  - name: headless
    port: 80
    targetPort: 8081
  - name: prometheus
    port: 8181
    targetPort: 8181
  selector:
    app: todo-backend-django-valence
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: todo-backend-django
    valence.net/prometheus: "true"
  name: todo-backend-django
spec:
  ports:
  - name: headless
    port: 80
    targetPort: 8081
  - name: prometheus
    port: 8181
    targetPort: 8181
  selector:
    app: todo-backend-django
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
    spec:
      containers:
      - image: gcr.io/google_containers/kube-state-metrics:v1.3.1
        name: kube-state-metrics
        ports:
        - containerPort: 8080
          name: metrics
        resources:
          limits:
            cpu: 200m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
      serviceAccountName: kube-state-metrics
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  template:
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server
    spec:
      containers:
      - command:
        - /metrics-server
        - --source=kubernetes.summary_api:''
        - --metric-resolution=5s
        image: gcr.io/google_containers/metrics-server-amd64:v0.2.1
        imagePullPolicy: Always
        name: metrics-server
        resources:
          limits:
            cpu: 80m
            memory: 200Mi
          requests:
            cpu: 40m
            memory: 32Mi
      serviceAccountName: metrics-server
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    valence.io/optimizer.configure: "true"
  labels:
    app: todo-backend-django-valence
    slo: slo-webapps
  name: todo-backend-django-valence
spec:
  replicas: 2
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: todo-backend-django-valence
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: todo-backend-django-valence
    spec:
      containers:
      - args:
        - start
        env:
        - name: TARGET_ADDRESS
          value: http://127.0.0.1:8000
        image: valencenet/prometheus-proxy:0.2.4
        imagePullPolicy: IfNotPresent
        name: prometheus-proxy
        resources:
          requests:
            cpu: 100m
      - env:
        - name: PORT
          value: "8000"
        image: manifoldco/todo-backend-django:latest
        imagePullPolicy: IfNotPresent
        name: todo-backend-django-valence
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 30
          httpGet:
            path: /todos
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 60
          timeoutSeconds: 30
        resources:
          limits:
            cpu: 500m
            memory: 500M
          requests:
            cpu: 250m
            memory: 250M
      restartPolicy: Always
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: todo-backend-django
  name: todo-backend-django
spec:
  replicas: 2
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: todo-backend-django
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: todo-backend-django
    spec:
      containers:
      - args:
        - start
        env:
        - name: TARGET_ADDRESS
          value: http://127.0.0.1:8000
        image: valencenet/prometheus-proxy:0.2.4
        imagePullPolicy: IfNotPresent
        name: prometheus-proxy
      - env:
        - name: PORT
          value: "8000"
        image: manifoldco/todo-backend-django:latest
        imagePullPolicy: IfNotPresent
        name: todo-backend-django
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 30
          httpGet:
            path: /todos
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 60
          timeoutSeconds: 30
        resources:
          limits:
            cpu: 500m
            memory: 500M
          requests:
            cpu: 250m
            memory: 250M
      restartPolicy: Always
---
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
spec:
  group: metrics.k8s.io
  groupPriorityMinimum: 100
  insecureSkipTLSVerify: true
  service:
    name: metrics-server
    namespace: kube-system
  version: v1beta1
  versionPriority: 100
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: todo-backend-django-valence
  name: majin-todo-backend-django-valence
spec:
  template:
    metadata:
      labels:
        app: todo-backend-django-valence
    spec:
      containers:
      - args:
        - attack
        - --base-load
        - "500"
        - --period
        - "300"
        env:
        - name: TARGET
          value: http://todo-backend-django-valence.default/todos
        image: valencenet/majin:0.2.4
        name: majin
      restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: todo-backend-django
  name: majin-todo-backend-django
spec:
  template:
    metadata:
      labels:
        app: todo-backend-django
    spec:
      containers:
      - args:
        - attack
        - --base-load
        - "500"
        - --period
        - "300"
        env:
        - name: TARGET
          value: http://todo-backend-django.default/todos
        image: valencenet/majin:0.2.4
        name: majin
      restartPolicy: OnFailure
---
apiVersion: optimizer.valence.io/v1alpha1
kind: ServiceLevelObjective
metadata:
  name: slo-webapps
spec:
  objectives:
  - http:
      latency:
        percentile: 95
        responseTime: 500ms
    type: HTTP
  selector:
    slo: slo-webapps
