apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: valence
    app.kubernetes.io/part-of: valence
    app.kubernetes.io/version: 0.2.10
  name: valence-system
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: valence
    app.kubernetes.io/part-of: valence
    app.kubernetes.io/version: 0.2.10
  name: servicelevelobjectives.optimizer.valence.io
spec:
  group: optimizer.valence.io
  names:
    kind: ServiceLevelObjective
    plural: servicelevelobjectives
  scope: Namespaced
  version: v1alpha1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: prometheus-valence
    app.kubernetes.io/part-of: valence
  name: prometheus-valence
  namespace: valence-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: valence
    app.kubernetes.io/part-of: valence
    app.kubernetes.io/version: 0.2.10
  name: valence-operator
  namespace: valence-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: prometheus-valence
    app.kubernetes.io/part-of: valence
  name: prometheus-valence
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: valence
    app.kubernetes.io/part-of: valence
    app.kubernetes.io/version: 0.2.10
  name: valence:optimization-operator
rules:
- apiGroups:
  - extensions
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods
  - events
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - optimizer.valence.io
  resources:
  - servicelevelobjectives
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: prometheus-valence
    app.kubernetes.io/part-of: valence
  name: prometheus-valence
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-valence
subjects:
- kind: ServiceAccount
  name: prometheus-valence
  namespace: valence-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: valence
    app.kubernetes.io/part-of: valence
    app.kubernetes.io/version: 0.2.10
  name: valence:optimization-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: valence:optimization-operator
subjects:
- kind: ServiceAccount
  name: valence-operator
  namespace: valence-system
---
apiVersion: v1
data:
  valence.json: |
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": 1,
      "iteration": 1551793537194,
      "links": [],
      "panels": [
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "-- Mixed --",
          "description": "Recommendations of Memory requests and limits to set for $deployment",
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "legend": {
            "avg": false,
            "current": true,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "max(container_memory_working_set_bytes{container_name=\"$deployment\"})",
              "format": "time_series",
              "instant": false,
              "interval": "5s",
              "intervalFactor": 1,
              "legendFormat": "Observed Memory Value",
              "refId": "A"
            },
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "max(valence_recommendations_memory_requests{container_name=\"$deployment\"})",
              "format": "time_series",
              "hide": false,
              "instant": false,
              "interval": "60s",
              "intervalFactor": 1,
              "legendFormat": "Recommended Memory Request",
              "refId": "B"
            },
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "max(valence_recommendations_memory_limits{container_name=\"$deployment\"})",
              "format": "time_series",
              "hide": false,
              "interval": "60s",
              "intervalFactor": 1,
              "legendFormat": "Recommended Memory Limit",
              "refId": "C"
            },
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "max(kube_pod_container_resource_requests_memory_bytes{container=\"$deployment\"})",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Requests",
              "refId": "D"
            },
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "max(kube_pod_container_resource_limits_memory_bytes{container=\"$deployment\"})",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Limits",
              "refId": "E"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "Memory recommendations: $deployment",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transparent": false,
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": "Memory",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "-- Mixed --",
          "description": "Recommendations of CPU requests and limits to set for $deployment",
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 8
          },
          "id": 4,
          "legend": {
            "avg": false,
            "current": true,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "avg(rate(container_cpu_usage_seconds_total{container_name=\"$deployment\"}[2m]))",
              "format": "time_series",
              "instant": false,
              "interval": "5s",
              "intervalFactor": 1,
              "legendFormat": "Observed CPU Value",
              "refId": "A"
            },
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "max(valence_recommendations_cpu_requests{container_name=\"$deployment\"} / 1000)",
              "format": "time_series",
              "hide": false,
              "instant": false,
              "interval": "60s",
              "intervalFactor": 1,
              "legendFormat": "Recommended CPU Request",
              "refId": "B"
            },
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "max(valence_recommendations_cpu_limits{container_name=\"$deployment\"} / 1000)",
              "format": "time_series",
              "hide": false,
              "interval": "60s",
              "intervalFactor": 1,
              "legendFormat": "Recommended CPU Limit",
              "refId": "C"
            },
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "max(kube_pod_container_resource_requests_cpu_cores{container=\"$deployment\"})",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Requests",
              "refId": "D"
            },
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "max(kube_pod_container_resource_limits_cpu_cores{container=\"$deployment\"})",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Limits",
              "refId": "E"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "Cpu recommendations: $deployment",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transparent": false,
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": "CPU",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "DS_PROM_VALENCE",
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 16
          },
          "id": 6,
          "legend": {
            "avg": false,
            "current": true,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(increase(promproxy_metric_handler_detailed_requests_count{service=\"$deployment\"}[1m])) / 60",
              "format": "time_series",
              "instant": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "HTTP Queries Per Second",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "HTTP Request Count: $deployment",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": "QpS",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "DS_PROM_VALENCE",
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 24
          },
          "id": 7,
          "legend": {
            "avg": false,
            "current": true,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "avg(rate(promproxy_metric_handler_detailed_requests{service=\"$deployment\", quantile=\"$LatencyPercentile\", code!=\"502\"}[1m]))",
              "format": "time_series",
              "instant": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "HTTP Request Latency",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "HTTP Request Latency: $deployment",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "s",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "-- Mixed --",
          "description": "Number of replicas observed and recommended for: $deployment",
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 32
          },
          "id": 9,
          "legend": {
            "avg": false,
            "current": true,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "valence_recommendations_replicas{name=\"$deployment\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Recommended Replicas",
              "refId": "A"
            },
            {
              "datasource": "DS_PROM_VALENCE",
              "expr": "kube_deployment_status_replicas_available{deployment=\"$deployment\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Current Replicas",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "Replicas: $deployment",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": "5s",
      "schemaVersion": 16,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {
              "selected": false,
              "text": "todo-backend-java",
              "value": "todo-backend-java"
            },
            "datasource": "DS_PROM_VALENCE",
            "hide": 0,
            "includeAll": false,
            "label": "Deployment",
            "multi": false,
            "name": "deployment",
            "options": [],
            "query": "label_values(promproxy_metric_handler_detailed_requests, service)",
            "refresh": 1,
            "regex": "",
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {
              "selected": true,
              "text": "0.95",
              "value": "0.95"
            },
            "datasource": "DS_PROM_VALENCE",
            "hide": 0,
            "includeAll": false,
            "label": "Latency Percentile",
            "multi": false,
            "name": "LatencyPercentile",
            "options": [],
            "query": "label_values(promproxy_metric_handler_detailed_requests, quantile)",
            "refresh": 1,
            "regex": "",
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-5m",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "1s",
          "5s",
          "30s",
          "1m"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Valence",
      "uid": "9ri9X0Qiz",
      "version": 1
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: valence
  name: grafana-dashboards-valence
  namespace: valence-system
---
apiVersion: v1
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: DS_PROM_VALENCE
        type: prometheus
        access: proxy
        url: http://prometheus-valence.valence-system:9090
        editable: false
        version: 1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: valence
  name: grafana-datasources
  namespace: valence-system
---
apiVersion: v1
data:
  default.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        org_id: 1
        folder: ''
        type: 'file'
        options:
          path: '/var/lib/grafana/dashboards'
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: valence
  name: grafana-providers
  namespace: valence-system
---
apiVersion: v1
data:
  prometheus.yaml: |
    global:
      scrape_interval: 10s
      scrape_timeout: 10s
      evaluation_interval: 10s
    rule_files:
      - "/etc/prometheus-rules/*.rules"
    remote_write:
    - url: http://optimization-operator.valence-system:8080/write
    scrape_configs:
    - job_name: kube-state-metrics
      honor_labels: true
      scrape_interval: 1m
      scrape_timeout: 10s
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
      - role: endpoints
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      tls_config:
        insecure_skip_verify: true
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: (?i)(kube_pod_container_resource_requests_memory_bytes|kube_pod_container_resource_limits_memory_bytes|kube_pod_container_resource_requests_cpu_cores|kube_pod_container_resource_limits_cpu_cores|kube_deployment_status_replicas_available)
        action: keep
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        separator: ;
        regex: kube-state-metrics
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        separator: ;
        regex: metrics
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_namespace]
        separator: ;
        regex: (.*)
        target_label: namespace
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
        separator: ;
        regex: Node;(.*)
        target_label: node
        replacement: ${1}
        action: replace
      - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
        separator: ;
        regex: Pod;(.*)
        target_label: pod
        replacement: ${1}
        action: replace
      - source_labels: [__meta_kubernetes_service_name]
        separator: ;
        regex: (.*)
        target_label: service
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_service_name]
        separator: ;
        regex: (.*)
        target_label: job
        replacement: ${1}
        action: replace
      - source_labels: [__meta_kubernetes_service_label_app]
        separator: ;
        regex: (.+)
        target_label: job
        replacement: ${1}
        action: replace
      - separator: ;
        regex: (.*)
        target_label: endpoint
        replacement: metrics
        action: replace
    - job_name: kubernetes-nodes-cadvisor
      scrape_interval: 5s
      scrape_timeout: 10s
      metrics_path: /metrics
      scheme: https
      kubernetes_sd_configs:
      - api_server: null
        role: node
        namespaces:
          names: []
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: (?i)(container_memory_working_set_bytes|container_cpu_usage_seconds_total)
        action: keep
      relabel_configs:
      - separator: ;
        regex: __meta_kubernetes_node_label_(.+)
        replacement: $1
        action: labelmap
      - separator: ;
        regex: (.*)
        target_label: __address__
        replacement: kubernetes.default.svc:443
        action: replace
      - source_labels: [__meta_kubernetes_node_name]
        separator: ;
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
        action: replace
    - job_name: prometheus-valence
      scrape_interval: 5s
      scrape_timeout: 5s
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
      - role: endpoints
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: (?i)(promproxy_metric_handler_detailed_requests_count|promproxy_metric_handler_detailed_requests)
        action: keep
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_valence_net_prometheus]
        separator: ;
        regex: "true"
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        separator: ;
        regex: prometheus
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_namespace]
        separator: ;
        regex: (.*)
        target_label: namespace
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
        separator: ;
        regex: Node;(.*)
        target_label: node
        replacement: ${1}
        action: replace
      - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
        separator: ;
        regex: Pod;(.*)
        target_label: pod
        replacement: ${1}
        action: replace
      - source_labels: [__meta_kubernetes_service_name]
        separator: ;
        regex: (.*)
        target_label: service
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_service_name]
        separator: ;
        regex: (.*)
        target_label: job
        replacement: ${1}
        action: replace
      - separator: ;
        regex: (.*)
        target_label: endpoint
        replacement: prometheus
        action: replace
    - job_name: valence
      scrape_interval: 1m
      scrape_timeout: 10s
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - valence-system
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: (?i)(valence_recommendations_memory_requests|valence_recommendations_memory_limits|valence_recommendations_cpu_requests|valence_recommendations_cpu_limits|valence_recommendations_replicas|valence_original_cpu_limits|valence_original_cpu_requests|valence_original_memory_limits|valence_original_memory_requests|valence_original_replicas|valence_slo_http_latency|valence_slo_http_percentile|valence_slo_http_throughput)
        action: keep
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_component]
        separator: ;
        regex: operator
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        separator: ;
        regex: prometheus
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_namespace]
        separator: ;
        regex: (.*)
        target_label: namespace
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
        separator: ;
        regex: Node;(.*)
        target_label: node
        replacement: ${1}
        action: replace
      - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
        separator: ;
        regex: Pod;(.*)
        target_label: pod
        replacement: ${1}
        action: replace
      - source_labels: [__meta_kubernetes_service_name]
        separator: ;
        regex: (.*)
        target_label: service
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_service_name]
        separator: ;
        regex: (.*)
        target_label: job
        replacement: ${1}
        action: replace
      - separator: ;
        regex: (.*)
        target_label: endpoint
        replacement: prometheus
        action: replace
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: prometheus-valence
    app.kubernetes.io/part-of: valence
  name: prometheus-valence
  namespace: valence-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: valence
  name: grafana
  namespace: valence-system
spec:
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: valence
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: valence
    app.kubernetes.io/part-of: valence
    app.kubernetes.io/version: 0.2.10
  name: optimization-operator
  namespace: valence-system
spec:
  ports:
  - name: prometheus
    port: 8080
    targetPort: 8080
  selector:
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: valence
    app.kubernetes.io/part-of: valence
    app.kubernetes.io/version: 0.2.10
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: prometheus-valence
    app.kubernetes.io/part-of: valence
  name: prometheus-valence
  namespace: valence-system
spec:
  ports:
  - name: web
    port: 9090
    protocol: TCP
    targetPort: web
  selector:
    app.kubernetes.io/name: prometheus-valence
    app.kubernetes.io/part-of: valence
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: valence
  name: grafana
  namespace: valence-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/part-of: valence
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/part-of: valence
    spec:
      containers:
      - env:
        - name: GF_SERVER_ROOT_URL
          value: /api/v1/namespaces/valence-system/services/grafana/proxy/
        image: grafana/grafana:5.2.4
        name: grafana
        ports:
        - containerPort: 3000
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 2500Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: data
        - mountPath: /etc/grafana/provisioning/dashboards
          name: providers
        - mountPath: /etc/grafana/provisioning/datasources
          name: datasources
        - mountPath: /var/lib/grafana/dashboards/capacity-planning.json
          name: dashboards-valence
          subPath: valence.json
      restartPolicy: Always
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          name: grafana-providers
        name: providers
      - configMap:
          name: grafana-datasources
        name: datasources
      - configMap:
          name: grafana-dashboards-valence
        name: dashboards-valence
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: valence
    app.kubernetes.io/part-of: valence
    app.kubernetes.io/version: 0.2.10
  name: optimization-operator
  namespace: valence-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: operator
      app.kubernetes.io/name: valence
      app.kubernetes.io/part-of: valence
      app.kubernetes.io/version: 0.2.10
  template:
    metadata:
      labels:
        app.kubernetes.io/component: operator
        app.kubernetes.io/name: valence
        app.kubernetes.io/part-of: valence
        app.kubernetes.io/version: 0.2.10
    spec:
      containers:
      - args:
        - operator
        env:
        - name: LICENSE_KEY
          value: "license-key"
        - name: MIN_SAMPLE_SIZE
          value: "20"
        - name: PROMETHEUS_URL
          value: http://prometheus-valence.valence-system.svc:9090
        image: valencenet/valence:0.2.10
        imagePullPolicy: Always
        name: optimization-operator
        resources:
          limits:
            cpu: 500m
            memory: 500M
          requests:
            cpu: 250m
            memory: 250M
      serviceAccountName: valence-operator
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: prometheus-valence
    app.kubernetes.io/part-of: valence
  name: prometheus-valence
  namespace: valence-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-valence
      app.kubernetes.io/part-of: valence
  serviceName: prometheus-valence
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-valence
        app.kubernetes.io/part-of: valence
    spec:
      containers:
      - args:
        - --web.console.templates=/etc/prometheus/consoles
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --config.file=/etc/prometheus/prometheus.yaml
        - --storage.tsdb.path=/prometheus
        - --web.enable-lifecycle
        - --storage.tsdb.no-lockfile
        - --web.route-prefix=/
        - --storage.tsdb.retention.time=6h
        image: quay.io/prometheus/prometheus:v2.7.1
        name: prometheus
        ports:
        - containerPort: 9090
          name: web
        resources:
          limits:
            cpu: 250m
            memory: 2.5Gi
          requests:
            cpu: 100m
            memory: 2Gi
        volumeMounts:
        - mountPath: /etc/prometheus
          name: config-volume
        - mountPath: /etc/prometheus-rules
          name: rules-volume
        - mountPath: /prometheus
          name: prometheus-valence-db
      serviceAccountName: prometheus-valence
      volumes:
      - configMap:
          name: prometheus-valence
        name: config-volume
      - emptyDir: {}
        name: rules-volume
      - emptyDir: {}
        name: prometheus-valence-db
  volumeClaimTemplates: []
